{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as SQLite from 'expo-sqlite';\nvar db = SQLite.openDatabase('db.suis');\n\nvar setupDatabaseAsync = function setupDatabaseAsync() {\n  return _regeneratorRuntime.async(function setupDatabaseAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          return _context.abrupt(\"return\", new Promise(function (resolve, reject) {\n            db.transaction(function (tx) {\n              tx.executeSql('CREATE TABLE IF NOT EXISTS covid ( id INTEGER PRIMARY KEY AUTOINCREMENT,  userId text,  statusSend text, nroFicha text, fechaElaboracion text, estSalud text, ninioCdulado text,  nacionalidad text,  tipoDocumento text,  cedula text, pasaporte text,  primerNombre text,  segundoNombre text,  primerApellido text,  segundoApellido text,  sexo text,  fechaNacimiento text,  edad text,  estado text,  municipio text,  parroquia text,  zonaIndustrial text,  avenidaCalle text,  casaEdificio text,  pisoPlanta text,  tlf text,  tlfHabitacion text,  ocupacion text,  nacionalidadRepresentante text,  cedulaRepresentante text,  nombreRepresentante text,  estadoLugarAtencion text,  municipioLugarAtencion text,  parroquiaLugarAtencion text,  medico text,  sintomatico text,  fechaSintoma text,  poblacionRiesgo text,  nroSemanasGestacion text,  nroGesta text,  nroPartos text,  nroAbortos text,  nroCesareas text,  culminacionEmbarazo text,  procedimiento text,  isComplicacion text,  complicacion text,  nacimiento text,  edadGesta text,  sexoRecienNacido text,  peso text,  talla text,  isComplicacionRecienNacido text,  complicacionRecienNacido text,  relacionPcr text,  resultado text,  tipoExamen text,  fechaTomaMuestra date,  codigoBarra text,  observaciones text )');\n            }, function (_, error) {\n              console.warn(\"db error creating tables\");\n              console.warn(error);\n              reject(error);\n            }, function (_, success) {\n              resolve(success);\n            });\n          }));\n\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar setupDatabaseUserAsync = function setupDatabaseUserAsync() {\n  return _regeneratorRuntime.async(function setupDatabaseUserAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          return _context2.abrupt(\"return\", new Promise(function (resolve, reject) {\n            db.transaction(function (tx) {\n              tx.executeSql('CREATE TABLE IF NOT EXISTS users ( id INTEGER PRIMARY KEY AUTOINCREMENT,  idsuis INTEGER, username text, password text)');\n            }, function (_, error) {\n              console.warn(\"db error creating tables\");\n              console.warn(error);\n              reject(error);\n            }, function (_, success) {\n              resolve(success);\n            });\n          }));\n\n        case 1:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar getFicha = function getFicha(setDataFunc) {\n  db.transaction(function (tx) {\n    tx.executeSql('select * from covid', [], function (_, _ref) {\n      var _array = _ref.rows._array;\n      setDataFunc(_array);\n    });\n  }, function (t, error) {\n    console.warn(\"db error load data\" + t);\n    console.warn(error);\n  }, function (_t, _success) {\n    console.info(\"data cargada\");\n  });\n};\n\nvar getUSer = function getUSer(usuario, clave, setDataUser) {\n  db.transaction(function (tx) {\n    tx.executeSql('select idsuis from users where username=? AND password=?', [usuario, clave], function (_, _ref2) {\n      var _array = _ref2.rows._array;\n      setDataUser(_array);\n    });\n  }, function (t, error) {\n    console.warn(error);\n    console.info(t);\n  }, function (_t, _success) {\n    console.info(\"data cargada\");\n  });\n};\n\nvar insertFicha = function insertFicha(dataFicha, nextStep) {\n  db.transaction(function (tx) {\n    tx.executeSql('insert into covid ( userId, statusSend, nroFicha, fechaElaboracion, estSalud, ninioCdulado, nacionalidad, tipoDocumento, cedula,pasaporte, primerNombre, segundoNombre, primerApellido, segundoApellido, sexo, fechaNacimiento, edad, estado, municipio, parroquia, zonaIndustrial, avenidaCalle, casaEdificio, pisoPlanta, tlf, tlfHabitacion, ocupacion, nacionalidadRepresentante, cedulaRepresentante, nombreRepresentante, estadoLugarAtencion, municipioLugarAtencion, parroquiaLugarAtencion, medico, sintomatico, fechaSintoma, poblacionRiesgo, nroSemanasGestacion, nroGesta, nroPartos, nroAbortos, nroCesareas, culminacionEmbarazo, procedimiento, isComplicacion, complicacion, nacimiento, edadGesta, sexoRecienNacido, peso, talla, isComplicacionRecienNacido, complicacionRecienNacido, relacionPcr, resultado, tipoExamen, fechaTomaMuestra, codigoBarra, observaciones ) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)', dataFicha);\n  }, function (t, error) {\n    console.log(\"db error insertUser \" + t);\n    console.log(error);\n  }, function (t, success) {\n    nextStep();\n  });\n};\n\nvar dropDatabaseTablesAsync = function dropDatabaseTablesAsync() {\n  return _regeneratorRuntime.async(function dropDatabaseTablesAsync$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          return _context3.abrupt(\"return\", new Promise(function (resolve, reject) {\n            db.transaction(function (tx) {\n              tx.executeSql('drop table covid', [], function (_, result) {\n                resolve(result);\n              }, function (_, error) {\n                console.log(\"error dropping users table\");\n                reject(error);\n              });\n            });\n          }));\n\n        case 1:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport var database = {\n  setupDatabaseAsync: setupDatabaseAsync,\n  getFicha: getFicha,\n  insertFicha: insertFicha,\n  dropDatabaseTablesAsync: dropDatabaseTablesAsync,\n  setupDatabaseUserAsync: setupDatabaseUserAsync,\n  getUSer: getUSer\n};","map":{"version":3,"sources":["C:/Users/joiner/Desktop/suis-movil/app/db/database.js"],"names":["SQLite","db","openDatabase","setupDatabaseAsync","Promise","resolve","reject","transaction","tx","executeSql","_","error","console","warn","success","setupDatabaseUserAsync","getFicha","setDataFunc","_array","rows","t","_t","_success","info","getUSer","usuario","clave","setDataUser","insertFicha","dataFicha","nextStep","log","dropDatabaseTablesAsync","result","database"],"mappings":"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","sourcesContent":["import * as SQLite from 'expo-sqlite'\r\nconst db = SQLite.openDatabase('db.suis');\r\n\r\nconst setupDatabaseAsync = async () => {\r\n    return new Promise((resolve, reject) => {\r\n        db.transaction(tx => {\r\n            tx.executeSql(\r\n                'CREATE TABLE IF NOT EXISTS covid ( id INTEGER PRIMARY KEY AUTOINCREMENT,  userId text,  statusSend text, nroFicha text, fechaElaboracion text, estSalud text, ninioCdulado text,  nacionalidad text,  tipoDocumento text,  cedula text, pasaporte text,  primerNombre text,  segundoNombre text,  primerApellido text,  segundoApellido text,  sexo text,  fechaNacimiento text,  edad text,  estado text,  municipio text,  parroquia text,  zonaIndustrial text,  avenidaCalle text,  casaEdificio text,  pisoPlanta text,  tlf text,  tlfHabitacion text,  ocupacion text,  nacionalidadRepresentante text,  cedulaRepresentante text,  nombreRepresentante text,  estadoLugarAtencion text,  municipioLugarAtencion text,  parroquiaLugarAtencion text,  medico text,  sintomatico text,  fechaSintoma text,  poblacionRiesgo text,  nroSemanasGestacion text,  nroGesta text,  nroPartos text,  nroAbortos text,  nroCesareas text,  culminacionEmbarazo text,  procedimiento text,  isComplicacion text,  complicacion text,  nacimiento text,  edadGesta text,  sexoRecienNacido text,  peso text,  talla text,  isComplicacionRecienNacido text,  complicacionRecienNacido text,  relacionPcr text,  resultado text,  tipoExamen text,  fechaTomaMuestra date,  codigoBarra text,  observaciones text )'\r\n            )\r\n        },\r\n            (_, error) => { console.warn(\"db error creating tables\"); console.warn(error); reject(error) },\r\n            (_, success) => { resolve(success) }\r\n        )\r\n    })\r\n}\r\n\r\nconst setupDatabaseUserAsync = async () => {\r\n    return new Promise((resolve, reject) => {\r\n        db.transaction(tx => {\r\n            tx.executeSql(\r\n                'CREATE TABLE IF NOT EXISTS users ( id INTEGER PRIMARY KEY AUTOINCREMENT,  idsuis INTEGER, username text, password text)'\r\n            )\r\n        },\r\n            (_, error) => { console.warn(\"db error creating tables\"); console.warn(error); reject(error) },\r\n            (_, success) => { resolve(success) }\r\n        )\r\n    })\r\n}\r\n\r\nconst getFicha = (setDataFunc) => {\r\n    db.transaction(\r\n        tx => {\r\n            tx.executeSql(\r\n                'select * from covid',\r\n                [],\r\n                (_, { rows: { _array } }) => {\r\n                    setDataFunc(_array)\r\n                }\r\n            );\r\n        },\r\n        (t, error) => { console.warn(\"db error load data\" + t); console.warn(error) },\r\n        (_t, _success) => { console.info(\"data cargada\") }\r\n    );\r\n}\r\nconst getUSer = (usuario, clave, setDataUser) => {\r\n    db.transaction(\r\n        tx => {\r\n            tx.executeSql(\r\n                'select idsuis from users where username=? AND password=?',\r\n                [usuario, clave],\r\n                (_, { rows: { _array } }) => {\r\n                    setDataUser(_array)\r\n                }\r\n            );\r\n        },\r\n        (t, error) => { \r\n            console.warn(error); \r\n            console.info(t)\r\n        },\r\n        (_t, _success) => { console.info(\"data cargada\") }\r\n    );\r\n}\r\n\r\n//TODO CAMBIAR EL VALOR DEL USER ID\r\nconst insertFicha = (dataFicha, nextStep) => {\r\n    db.transaction(tx => {\r\n        tx.executeSql('insert into covid ( userId, statusSend, nroFicha, fechaElaboracion, estSalud, ninioCdulado, nacionalidad, tipoDocumento, cedula,pasaporte, primerNombre, segundoNombre, primerApellido, segundoApellido, sexo, fechaNacimiento, edad, estado, municipio, parroquia, zonaIndustrial, avenidaCalle, casaEdificio, pisoPlanta, tlf, tlfHabitacion, ocupacion, nacionalidadRepresentante, cedulaRepresentante, nombreRepresentante, estadoLugarAtencion, municipioLugarAtencion, parroquiaLugarAtencion, medico, sintomatico, fechaSintoma, poblacionRiesgo, nroSemanasGestacion, nroGesta, nroPartos, nroAbortos, nroCesareas, culminacionEmbarazo, procedimiento, isComplicacion, complicacion, nacimiento, edadGesta, sexoRecienNacido, peso, talla, isComplicacionRecienNacido, complicacionRecienNacido, relacionPcr, resultado, tipoExamen, fechaTomaMuestra, codigoBarra, observaciones ) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)', dataFicha);\r\n    },\r\n        (t, error) => { console.log(\"db error insertUser \" + t); console.log(error); },\r\n        (t, success) => { nextStep() }\r\n    )\r\n}\r\n\r\nconst dropDatabaseTablesAsync = async () => {\r\n    return new Promise((resolve, reject) => {\r\n      db.transaction(tx => {\r\n        tx.executeSql(\r\n          'drop table covid',\r\n          [],\r\n          (_, result) => { resolve(result) },\r\n          (_, error) => { console.log(\"error dropping users table\"); reject(error)\r\n          }\r\n        )\r\n      })\r\n    })\r\n  }\r\n\r\nexport const database = {\r\n    setupDatabaseAsync,\r\n    getFicha,\r\n    insertFicha,\r\n    dropDatabaseTablesAsync, \r\n    setupDatabaseUserAsync, \r\n    getUSer\r\n}"]},"metadata":{},"sourceType":"module"}